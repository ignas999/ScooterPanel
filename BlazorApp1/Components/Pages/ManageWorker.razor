@page "/worker"
@page "/worker/{Id:int}"
@rendermode InteractiveServer
@inject HttpClient Http
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager


@if (Id is null)
{
	<PageTitle> Sukurti Darbuotoją</PageTitle>
	<h3>Sukurti Darbuotoją</h3>
}
else
{
	<PageTitle> Redaguoti Darbuotoją </PageTitle>
	<h3>Redaguoti Darbuotoją @worker.first_name @worker.last_name</h3>
}

<EditForm Model="@worker" OnSubmit="@HandleSubmit" FormName="worker">

	
	<MudTextField @bind-Value="@worker.first_name" Label="Vardas" Variant="Variant.Outlined" Required="true"></MudTextField>
	<MudTextField @bind-Value="@worker.last_name" Label="Pavardė" Variant="Variant.Outlined" Required="true"></MudTextField>
	<MudTextField @bind-Value="@worker.username" Label="Prisijungimo Vardas" Variant="Variant.Outlined" Required="true"></MudTextField>
	<MudTextField @bind-Value="@worker.password" Label="Slaptažodis" Variant="Variant.Outlined" Required="true" InputType="InputType.Password"></MudTextField>

	<MudSelect T="int" Label="Pareigos" @bind-Value="@worker.privillege_id" AnchorOrigin="Origin.BottomCenter" Required="true">
		@foreach (var privilege in privilleges)
		{
			<MudSelectItem Value="@privilege.privillege_id">@privilege.name</MudSelectItem>
		}
	</MudSelect>
	<MudSelect T="int" Label="Darbo Vieta" @bind-Value="@worker.location_id" AnchorOrigin="Origin.BottomCenter" Required="true">
		@foreach (var location in locations)
		{
			<MudSelectItem Value="@location.location_id">@location.city @location.street</MudSelectItem>
		}
	</MudSelect>
	<button type="submit" class="btn btn-primary">Submit</button>


	@if (Id is not null)
	{
		<MudButton Variant="Variant.Text" Color="Color.Error" OnClick="DeleteConfirmation">Delete</MudButton>
	}
</EditForm>



@code {
	[Parameter]
	public int? Id { get; set; }
	Worker worker = new Worker();
	public ICollection<Privillege> privilleges = Array.Empty<Privillege>();
	public ICollection<Location> locations = Array.Empty<Location>();


	protected override async Task OnInitializedAsync()
	{
		Worker currentloggedin = new();
		//worker logic to get current worker needed for maintenance
		var retreived = await ProtectedSessionStore.GetAsync<string>("result");
		try
		{
			currentloggedin = JsonSerializer.Deserialize<Worker>(retreived.Value);
		}
		catch (Exception ex)
		{

		}
		if (currentloggedin != null)
		{
			Console.WriteLine("Deserialization successful");
			Console.WriteLine(currentloggedin.worker_id);
		}
		else
		{
			Console.WriteLine("Deserialization failed");
		}

		if (currentloggedin.worker_id is 0)
		{
			Snackbar.Add("Neprisijungę!", Severity.Error);
			NavigationManager.NavigateTo("/");
		}
		if (currentloggedin.privillege_id != 2)
		{
			Snackbar.Add("Neturite Teisių čia būti!", Severity.Error);
			NavigationManager.NavigateTo("/");
		}

		GetPrivilleges();
		GetLocations();
	}

	protected override async Task OnParametersSetAsync()
	{
		if (Id is not null)
		{
			var response = await Http.GetAsync($"http://localhost:5049/api/workers/{Id}");

			var successMessage = await response.Content.ReadAsStringAsync();
			Console.WriteLine($"message: {successMessage}");

			if (response.IsSuccessStatusCode)
			{
				var result = await response.Content.ReadFromJsonAsync<Worker>();
				worker = result;

			}



		}


	}


	public void GoBackToList()
	{
		NavigationManager.NavigateTo("/workers");
	}


	async Task GetPrivilleges()
	{
		var response = await Http.GetAsync($"http://localhost:5049/api/Privilleges");

		if (response.IsSuccessStatusCode)
		{
			var result = await response.Content.ReadFromJsonAsync<ICollection<Privillege>>();
			privilleges = result;
		}
	}

	async Task GetLocations()
	{
		var response = await Http.GetAsync($"http://localhost:5049/api/Locations");

		if (response.IsSuccessStatusCode)
		{
			var result = await response.Content.ReadFromJsonAsync<ICollection<Location>>();
			locations = result;
		}
	}

	async Task DeleteRecord()
	{
		var response = await Http.DeleteAsync($"http://localhost:5049/api/workers/{Id}");

		if (response.IsSuccessStatusCode)
		{
			var successMessage = await response.Content.ReadAsStringAsync();
			Console.WriteLine($"Success: {successMessage}");
			Snackbar.Add("Įrašas ištrintas", Severity.Success);
		}
		else
		{
			var errorMessage = await response.Content.ReadAsStringAsync();
			Console.WriteLine($"Error: {response.StatusCode} - {errorMessage}");
			Snackbar.Add("Įvyko klaida ištrintant įrašą", Severity.Error);
		}

		GoBackToList();
	}

	private async void DeleteConfirmation()
	{
		var parameters = new DialogParameters<DialogEdit>();
		parameters.Add(x => x.ContentText, "Ar tikrai norite ištrinti šį įrašą?");
		parameters.Add(x => x.ButtonText, "Ištrinti");
		parameters.Add(x => x.Color, Color.Error);

		var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.Medium };

		var result = await DialogService.Show<DialogEdit>("Ištrynimo patvirtinimas", parameters, options).Result;

		if (result.Canceled)
		{
			Console.WriteLine("canceled");

		}
		else
		{
			DeleteRecord();
		}
	}



	async Task HandleSubmit()
	{
		if (Id is null)
		{
			//If there is no id in the link , that means is a create request

			Console.Write(JsonSerializer.Serialize(worker));


			var response = await Http.PostAsJsonAsync("http://localhost:5049/api/Workers/", worker);

			if (response.IsSuccessStatusCode)
			{
				// Worker updated successfully
				var successMessage = await response.Content.ReadAsStringAsync();
				// Handle the success case or display the success message
				Console.WriteLine($"Success: {successMessage}");
				Snackbar.Add("Sėkmingai pridėtas įrašas", Severity.Success);
				GoBackToList();

			}
			else
			{
				// Handle the case where the update was not successful
				var errorMessage = await response.Content.ReadAsStringAsync();
				// You can access the response content, status code, etc. for more details
				Console.WriteLine($"Error: {response.StatusCode} - {errorMessage}");
				// Handle the error as needed
				Snackbar.Add("Įvyko klaida pridedant įrašą", Severity.Error);
			}

		}
		else
		{
			var parameters = new DialogParameters<DialogEdit>();
			parameters.Add(x => x.ContentText, "Ar tikrai norite atlikti pakeitimus ?");
			parameters.Add(x => x.ButtonText, "Patvirtinti");
			parameters.Add(x => x.Color, Color.Warning);

			var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.Medium };

			var result = await DialogService.Show<DialogEdit>("Redagavimo patvirtinimas", parameters, options).Result;

			if (result.Canceled)
			{
				Console.WriteLine("canceled");

			}
			else
			{
				var response = await Http.PutAsJsonAsync($"http://localhost:5049/api/workers/{Id}", worker);

				if (response.IsSuccessStatusCode)
				{
					// Worker updated successfully
					var successMessage = await response.Content.ReadAsStringAsync();
					// Handle the success case or display the success message
					Console.WriteLine($"Success: {successMessage}");
					Snackbar.Add("Sėkmingai redaguotas įrašas", Severity.Success);
				}
				else
				{
					// Handle the case where the update was not successful
					var errorMessage = await response.Content.ReadAsStringAsync();
					// You can access the response content, status code, etc. for more details
					Console.WriteLine($"Error: {response.StatusCode} - {errorMessage}");
					// Handle the error as needed
					Snackbar.Add("Įvyko klaida redaguojant įrašą", Severity.Error);
				}
			}

		}
	}
}