@page "/transportssimple"

@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<h3>Transporto sąrašas</h3>

@if (getTransportsError || Transports is null)
{
    <p>Unable to get Transports from api.</p>
}
else
{
    <MudButton Variant="Variant.Filled" OnClick="ViewAllMaintenances">Peržiūrėti visą priežiūros istoriją</MudButton>
    <MudDataGrid Items="@Transports" Filterable="true" RowStyleFunc="@_rowStyleFunc" FilterMode="@DataGridFilterMode.ColumnFilterRow">
        <Columns>
            <TemplateColumn Filterable="false" Sortable="false">
                <CellTemplate>
                    <MudStack Row>
                     <MudImage Src=@($"transports/{context.Item.image}") Alt="image" Class="rounded-lg" Width="100" Height="100" />
                 </MudStack>
             </CellTemplate>
         </TemplateColumn>
         <PropertyColumn Property="p => p.transport_id" Filterable="false" Title="ID" />
         <PropertyColumn Property="p => p.Statuses.name" Title="Būsena" />
         <PropertyColumn Property="p => p.Locations.city +' ' +p.Locations.street" Title="Yra Adresu" />
         <PropertyColumn Property="p => p.Categories.name" Title="Tipas" />
         <PropertyColumn Property="p => p.name" Title="Pavadinimas" />
         <TemplateColumn title="Transporto Priežiūra" Filterable="false" Sortable="false">
             <CellTemplate>
                 <MudStack Row>
                     @if (context.Item.status_id == 3 || context.Item.status_id == 4)
                        {
                            <MudButton OnClick="() =>AvailableConfirmation(context.Item.transport_id, context.Item)" Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Success">Sutvarkytas</MudButton>
                        }
                        <MudButton OnClick="() =>AddMaintenance(context.Item.transport_id)" Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Info">Pridėti Įrašą</MudButton>
                     <MudButton OnClick="() =>ViewMaintenances(context.Item.transport_id)" Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Secondary">Priežiūros istorija</MudButton>
                 </MudStack>
             </CellTemplate>
         </TemplateColumn>


     </Columns>

 </MudDataGrid>
}

@code {
    private ICollection<Transport>? Transports = Array.Empty<Transport>();
    private bool getTransportsError;
    private bool _isCellEditMode;

    protected override async Task OnInitializedAsync()
    {
        Worker currentloggedin = new();
        var retreived = await ProtectedSessionStore.GetAsync<string>("result");
        if (retreived.Value is null)
        {
            Snackbar.Add("Neprisijunge!", Severity.Error);
            NavigationManager.NavigateTo("login");
            Console.WriteLine("Deserialization failed");
        }

        if (retreived.Value is not null)
        {
            currentloggedin = JsonSerializer.Deserialize<Worker>(retreived.Value);
            if (currentloggedin != null)
            {
                Console.WriteLine("prisijunges vartotojas");
                Console.WriteLine(currentloggedin.worker_id);
            }
            if (currentloggedin.privillege_id == 0)
            {
                Snackbar.Add("Neturite priskirtų Teisių! Kreipkitės į administratorių", Severity.Error);
                NavigationManager.NavigateTo("/");
                Console.WriteLine("neturi teisiu");
            }
        }


        try
        {
            var response = await Http.GetAsync("http://localhost:5049/api/Transport/");

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ICollection<Transport>>();
                Transports = result;
            }
            else
            {
                getTransportsError = true;
            }


        }
        catch (Exception)
        {
            getTransportsError = true;
        }

    }

    private Func<Transport, int, string> _rowStyleFunc => (x, i) =>
    {
        if (x.status_id == 8)
        {
            //if the status is "needed inspection"
            return "background-color: #f77979";
        }
        if (x.status_id == 3)
        {
            //if status is Charging
            return "background-color: #8ecaf5";
        }
        if (x.status_id == 4)
        {
            //if status is "being repaired"
            return "background-color: #f3f58e";
        }
        if (x.status_id == 5)
        {
            //if status is "finished repair"
            return "background-color: #79f78c";
        }


    return "";
    };

    private void ViewAllMaintenances()
    {
        NavigationManager.NavigateTo($"/maintenances");
    }

    private void ViewMaintenances(int id)
    {
        NavigationManager.NavigateTo($"/maintenances/transport/{id}");
    }
    private void AddMaintenance(int id)
    {
        NavigationManager.NavigateTo($"/maintenances/add/transport/{id}");
    }
    private async void AvailableConfirmation(int status_id, Transport selectedtransport)
    {
        var parameters = new DialogParameters<DialogEdit>();
        parameters.Add(x => x.ContentText, "Ar tikrai transporto priemonė sutvarkyta ir paruošta naudojimui?");
        parameters.Add(x => x.ButtonText, "Taip");
        parameters.Add(x => x.Color, Color.Error);

        var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.Medium };

        var result = await DialogService.Show<DialogEdit>("Priežiūros Pabaiga", parameters, options).Result;

        if (result.Canceled)
        {
            Console.WriteLine("canceled");

        }
        else
        {
            ChangeStatusOfTransport(1, selectedtransport);
        }
    }
    private async Task ChangeStatusOfTransport(int status_id, Transport selectedtransport)
    {

        selectedtransport.status_id = status_id;

        var response = await Http.PutAsJsonAsync($"http://localhost:5049/api/Transport/{selectedtransport.transport_id}", selectedtransport);

        if (response.IsSuccessStatusCode)
        {

            // transport updated successfully
            var successMessage = await response.Content.ReadAsStringAsync();
            // Handle the success case or display the success message
            Console.WriteLine($"Success: {successMessage}");
            Snackbar.Add("Sėkmingai atnaujinta transporto būsena", Severity.Success);

        }
        else
        {
            // Handle the case where the update was not successful
            var errorMessage = await response.Content.ReadAsStringAsync();
            // You can access the response content, status code, etc. for more details
            Console.WriteLine($"Error: {response.StatusCode} - {errorMessage}");
            // Handle the error as needed
            Snackbar.Add("Įvyko klaida atnaujinant transporto būseną", Severity.Error);
        }
    }

}
