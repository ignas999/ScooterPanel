@page "/categories"

@inject NavigationManager NavigationManager
@inject HttpClient Http

<h3>Kategorijų sąrašas</h3>

@if (getcategoriesError || categories is null)
{
    <p>Unable to get categories from api.</p>
}
else
{
    <MudButton Variant="Variant.Filled" OnClick="AddCategory">Pridėti</MudButton>

    <MudDataGrid Items="@categories" Filterable="true" FilterMode="@DataGridFilterMode.ColumnFilterRow">
        <Columns>
            <PropertyColumn Property="p => p.category_id" Filterable="false" Title="ID" />
            <PropertyColumn Property="p => p.name" Title="Pavadinimas"/>
            <TemplateColumn CellClass="d-flex justify-end" Filterable="false" Sortable="false">
                <CellTemplate>
                    <MudStack Row>

                     <MudButton OnClick="() =>EditCategory(context.Item.category_id)" Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary">Edit</MudButton>
                    
                 
                 </MudStack>
                </CellTemplate>
            </TemplateColumn>


     </Columns>

    </MudDataGrid>
}

@code {
    private ICollection<Category>? categories = Array.Empty<Category>();
    private bool getcategoriesError;
    private bool _isCellEditMode;

    protected override async Task OnInitializedAsync()
    {
        Worker currentloggedin = new();
        var retreived = await ProtectedSessionStore.GetAsync<string>("result");
        if (retreived.Value is null)
        {
            Snackbar.Add("Neprisijunge!", Severity.Error);
            NavigationManager.NavigateTo("login");
            Console.WriteLine("Deserialization failed");
        }

        if (retreived.Value is not null)
        {
            currentloggedin = JsonSerializer.Deserialize<Worker>(retreived.Value);
            if (currentloggedin != null)
            {
                Console.WriteLine("prisijunges vartotojas");
                Console.WriteLine(currentloggedin.worker_id);
            }
            if (currentloggedin.privillege_id == 0)
            {
                Snackbar.Add("Neturite priskirtų Teisių! Kreipkitės į administratorių", Severity.Error);
                NavigationManager.NavigateTo("/");
                Console.WriteLine("neturi teisiu");
            }
        }
        try
        {
            var response = await Http.GetAsync("http://localhost:5049/api/Categories/");

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ICollection<Category>>();
                categories = result;
            }
            else
            {
                getcategoriesError = true;
            }

            
        }
        catch (Exception)
        {
            getcategoriesError = true;
        }

    }

    private void AddCategory()
    {
        NavigationManager.NavigateTo("/category");
    }

    private void EditCategory(int id)
    {
        NavigationManager.NavigateTo($"/category/{id}");
    }
}
