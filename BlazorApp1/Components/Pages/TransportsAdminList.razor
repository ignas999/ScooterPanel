@page "/transports"

@inject NavigationManager NavigationManager
@inject HttpClient Http

<h3>Transporto sąrašas</h3>

@if (getTransportsError || Transports is null)
{
    <p>Unable to get Transports from api.</p>
}
else
{
    <MudButton Variant="Variant.Filled" OnClick="AddTransport">Pridėti</MudButton>

    <MudDataGrid Items="@Transports" Filterable="true" FilterMode="@DataGridFilterMode.ColumnFilterRow">
        <Columns>
            <TemplateColumn Filterable="false" Sortable="false">
                <CellTemplate>
                    <MudStack Row>
                     <MudImage Src=@($"transports/{context.Item.image}") Alt="image" Class="rounded-lg" Width="100" Height="100" />
                 </MudStack>
             </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="p => p.transport_id" Filterable="false" Title="ID" />
            <PropertyColumn Property="p => p.Statuses.name" Title="Būsena" />
            <PropertyColumn Property="p => p.Locations.city +' ' +p.Locations.street" Title="Yra Adresu" />
            <PropertyColumn Property="p => p.Categories.name" Title="Tipas" />
            <PropertyColumn Property="p => p.name" Title="Pavadinimas" />
            <TemplateColumn Filterable="false" Sortable="false">
                <CellTemplate>
                    <MudStack Row>
                     <MudButton OnClick="() =>EditTransport(context.Item.transport_id)" Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary">Edit</MudButton>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>


     </Columns>

 </MudDataGrid>
}

@code {
    private ICollection<Transport>? Transports = Array.Empty<Transport>();
    private bool getTransportsError;
    private bool _isCellEditMode;

    protected override async Task OnInitializedAsync()
    {
        Worker currentloggedin = new();
        var retreived = await ProtectedSessionStore.GetAsync<string>("result");
        if (retreived.Value is null)
        {
            Snackbar.Add("Neprisijunge!", Severity.Error);
            NavigationManager.NavigateTo("login");
            Console.WriteLine("Deserialization failed");
        }

        if (retreived.Value is not null)
        {
            currentloggedin = JsonSerializer.Deserialize<Worker>(retreived.Value);
            if (currentloggedin != null)
            {
                Console.WriteLine("prisijunges vartotojas");
                Console.WriteLine(currentloggedin.worker_id);
            }
            if (currentloggedin.privillege_id != 2)
            {
                Snackbar.Add("Neturite Admin Teisių!", Severity.Error);
                NavigationManager.NavigateTo("/");
                Console.WriteLine("neturi teisiu");
            }
        }

        try
        {
            var response = await Http.GetAsync("http://localhost:5049/api/Transport/");

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ICollection<Transport>>();
                Transports = result;
            }
            else
            {
                getTransportsError = true;
            }


        }
        catch (Exception)
        {
            getTransportsError = true;
        }

    }

    private void AddTransport()
    {
        NavigationManager.NavigateTo("/transport");
    }

    private void EditTransport(int id)
    {
        NavigationManager.NavigateTo($"/transport/{id}");
    }
}
