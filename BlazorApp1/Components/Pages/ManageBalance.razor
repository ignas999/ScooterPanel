@page "/balance/{Id:int}"
@rendermode InteractiveServer
@inject HttpClient Http
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@using System.Globalization;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStore



	<PageTitle> Redaguoti Kliento Balansą </PageTitle>
	<h3>Redaguoti Klientą @userinfo.username</h3>
	<h3>Turimas Balansas: @userinfo.balance</h3>


<EditForm Model="@userinfo" OnSubmit="@HandleSubmit" FormName="userinfo">

	<MudSelect T="int" Label="Operacija" @bind-Value="@balancesymbol" AnchorOrigin="Origin.BottomCenter" Required="true">

			<MudSelectItem Value="@(1)"> Pridėti </MudSelectItem>
			<MudSelectItem Value="@(-1)"> Atimti </MudSelectItem>
		
	</MudSelect>

	<MudNumericField @bind-Value="@additionalbalance" Label="Suma" Variant="Variant.Text" Min="0" Max="999" Required="true" Placeholder="pvz: 1" />
	

	<button type="submit" class="btn btn-primary">Submit</button>

</EditForm>



@code {
	[Parameter]
	public int? Id { get; set; }
	public double additionalbalance;
	public int balancesymbol = 1;
	User userinfo = new User();



	protected override async Task OnParametersSetAsync()
	{
		if (Id is not null)
		{
			var response = await Http.GetAsync($"http://localhost:5049/api/Users/{Id}");

			if (response.IsSuccessStatusCode)
			{
				var result = await response.Content.ReadFromJsonAsync<User>();
				userinfo = result;
			}

		}

	}

	//worker logic to get current worker needed for transaction
	Worker currentloggedin = new();
	protected override async Task OnInitializedAsync()
	{

		var retreived = await ProtectedSessionStore.GetAsync<string>("result");
		if (retreived.Value is null)
		{
			Snackbar.Add("Neprisijunge!", Severity.Error);
			NavigationManager.NavigateTo("login");
			Console.WriteLine("Deserialization failed");
		}

		if (retreived.Value is not null)
		{
			currentloggedin = JsonSerializer.Deserialize<Worker>(retreived.Value);
			if (currentloggedin != null)
			{
				Console.WriteLine("prisijunges vartotojas");
				Console.WriteLine(currentloggedin.worker_id);
			}
			if (currentloggedin.privillege_id == 0)
			{
				Snackbar.Add("Neturite priskirtų Teisių! Kreipkitės į administratorių", Severity.Error);
				NavigationManager.NavigateTo("/");
				Console.WriteLine("neturi teisiu");
			}
		}

	}
	async Task AddNewTransaction(int worker_id, int user_id , double amount)
	{
		Transaction newTransaction = new();

		DateTime currentdate = DateTime.Today;
		string formattedDate = currentdate.ToString("yyyy-MM-dd");

		Console.WriteLine(formattedDate);

		newTransaction.user_id = user_id;
		newTransaction.worker_id = worker_id;
		newTransaction.amount = amount;
		newTransaction.date = formattedDate;

		var response = await Http.PostAsJsonAsync($"http://localhost:5049/api/Transactions/", newTransaction);

		if (response.IsSuccessStatusCode)
		{
			// Category updated successfully
			var successMessage = await response.Content.ReadAsStringAsync();
			// Handle the success case or display the success message
			Console.WriteLine($"Success: {successMessage}");
			Snackbar.Add("Sėkmingai pridėtas mokėjimo įrašas ", Severity.Success);
		}
		else
		{
			// Handle the case where the update was not successful
			var errorMessage = await response.Content.ReadAsStringAsync();
			// You can access the response content, status code, etc. for more details
			Console.WriteLine($"Error: {response.StatusCode} - {errorMessage}");
			// Handle the error as needed
			Snackbar.Add("Įvyko klaida pridedant mokėjimo įraša", Severity.Error);
		}
	}

	async Task HandleSubmit()
	{
		if (additionalbalance * balancesymbol + userinfo.balance < 0)
		{
			Snackbar.Add("Klientas neturi tiek saskaitoje", Severity.Error);
			return;
		}
		else
		{
			await AddNewTransaction(currentloggedin.worker_id, userinfo.user_id, (additionalbalance * balancesymbol));
			//adjust to new balance before pushing
			userinfo.balance += additionalbalance * balancesymbol;

			var response = await Http.PutAsJsonAsync($"http://localhost:5049/api/Users/{Id}", userinfo);

			if (response.IsSuccessStatusCode)
			{
				// Category updated successfully
				var successMessage = await response.Content.ReadAsStringAsync();
				// Handle the success case or display the success message
				Console.WriteLine($"Success: {successMessage}");
				Snackbar.Add("Sėkmingai pakeistas balansas", Severity.Success);
			}
			else
			{
				// Handle the case where the update was not successful
				var errorMessage = await response.Content.ReadAsStringAsync();
				// You can access the response content, status code, etc. for more details
				Console.WriteLine($"Error: {response.StatusCode} - {errorMessage}");
				// Handle the error as needed
				Snackbar.Add("Įvyko klaida keičiant balansą", Severity.Error);
			}

			
		}

		
	}
}
